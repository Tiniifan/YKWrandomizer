<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EndianBitConverter</name>
    </assembly>
    <members>
        <member name="T:BitConverter.BigEndianBitConverter">
            <summary>
            A big-endian BitConverter that converts base data types to an array of bytes, and an array of bytes to base data types. All conversions are in
            big-endian format regardless of machine architecture.
            </summary>
        </member>
        <member name="T:BitConverter.EndianBitConverter">
            <summary>
            A BitConverter with a specific endianness that converts base data types to an array of bytes, and an array of bytes to base data types, regardless of
            machine architecture. Access the little-endian and big-endian converters with their respective properties.
            </summary>
            <remarks>
            The EndianBitConverter implementations provide the same interface as <see cref="T:System.BitConverter"/>, but exclude those methods which perform the
            same on both big-endian and little-endian machines (such as <see cref="M:System.BitConverter.ToString(System.Byte[])"/>). However, <see cref="M:BitConverter.EndianBitConverter.GetBytes(System.Boolean)"/> is
            included for consistency.
            </remarks>
        </member>
        <member name="P:BitConverter.EndianBitConverter.LittleEndian">
            <summary>
            Get an instance of a <see cref="T:BitConverter.LittleEndianBitConverter"/>, a BitConverter which performs all conversions in little-endian format regardless of
            machine architecture.
            </summary>
        </member>
        <member name="P:BitConverter.EndianBitConverter.BigEndian">
            <summary>
            Get an instance of a <see cref="T:BitConverter.BigEndianBitConverter"/>, a BitConverter which performs all conversions in big-endian format regardless of
            machine architecture.
            </summary>
        </member>
        <member name="P:BitConverter.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianness") in which data should be converted.
            </summary>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as a byte array.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>A byte array with length 1.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.Boolean"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.Char"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToChar(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.Double"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToDouble(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.Int16"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToInt16(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.Int32"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToInt32(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.Int64"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToInt64(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.Single"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToSingle(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>An array of bytes with length 2.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.UInt16"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.UInt32"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
            <remarks>You can convert a byte array back to a <see cref="T:System.UInt64"/> value by calling the <see cref="M:BitConverter.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)"/> method.</remarks>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from the byte at a specified position in a byte array.
            </summary>
            <param name="value">A byte array.</param>
            <param name="startIndex">The index of the byte within <paramref name="value"/>.</param>
            <returns>
            true if the byte at <paramref name="startIndex"/> in <paramref name="value"/> is nonzero; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 1.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A character formed by two bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToChar method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 1 to a <see cref="T:System.Char"/> value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 2.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToDouble method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 7 to a <see cref="T:System.Double"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 8.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToInt16 method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 1 to an <see cref="T:System.Int16"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 2.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes. </param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToInt32 method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 3 to an <see cref="T:System.Int32"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 4.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToInt64 method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 7 to an <see cref="T:System.Int64"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 8.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToSingle method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 3 to a <see cref="T:System.Single"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 4.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value"></param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToUInt16 method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 1 to a <see cref="T:System.UInt16"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 2.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes. </param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToUInt32 method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 3 to a <see cref="T:System.UInt32"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 4.
            </exception>
        </member>
        <member name="M:BitConverter.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes. </param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <returns>A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name="startIndex"/>.</returns>
            <remarks>
            The ToUInt64 method converts the bytes from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + 7 to a <see cref="T:System.UInt64"/>
            value.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero or greater than the length of <paramref name="value"/> minus 8.
            </exception>
        </member>
        <member name="T:BitConverter.LittleEndianBitConverter">
            <summary>
            A little-endian BitConverter that converts base data types to an array of bytes, and an array of bytes to base data types. All conversions are in
            little-endian format regardless of machine architecture.
            </summary>
        </member>
    </members>
</doc>
